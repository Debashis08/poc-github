name: poc-github-ci-cd

on:
  push:
    branches: [ main, release ]
  pull_request:
    branches: [ main, release ]
  workflow_dispatch:
    inputs:
      bump:
        description: "Select version bump type"
        required: true
        default: "patch"
        type: choice
        options:
          - major
          - minor
          - patch

permissions:
  contents: write

jobs:
  lint-build:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64

      - name: Install dependencies
        shell: pwsh
        run: |
          choco install cmake -y
          choco install ninja -y
          choco install llvm -y

      - name: Configure CMake
        shell: pwsh
        run: cmake -S . -B build -G "Ninja" -DCMAKE_EXPORT_COMPILE_COMMANDS=ON

      - name: Run clang-tidy
        shell: pwsh
        run: |
          clang-tidy --version
          $files = Get-ChildItem -Recurse -Path source -Include *.cpp,*.cc,*.cxx -File
          foreach ($file in $files) {
            Write-Host "Running clang-tidy on $($file.FullName)"
            clang-tidy -p build "$($file.FullName)" --warnings-as-errors=*
          }

      - name: Build
        shell: pwsh
        run: cmake --build build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: build/
          retention-days: 1

  test-job:
    needs: lint-build
    runs-on: windows-latest
    environment: test-approval  # Manual approval required before running

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: build/

      - name: Run tests
        shell: pwsh
        run: ctest --test-dir build --output-on-failure

  create-tag:
    needs: test-job
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Get latest tag
        id: get_tag
        shell: bash
        run: |
          latest=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "latest=$latest" >> $GITHUB_OUTPUT

      - name: Bump version
        id: bump
        shell: bash
        run: |
          latest=${{ steps.get_tag.outputs.latest }}
          bump=${{ github.event.inputs.bump }}
          echo "Latest tag: $latest"
          echo "Bump type: $bump"

          version="${latest#v}"
          IFS='.' read -r major minor patch <<< "$version"

          case "$bump" in
            major) major=$((major + 1)); minor=0; patch=0 ;;
            minor) minor=$((minor + 1)); patch=0 ;;
            patch) patch=$((patch + 1)) ;;
            *) echo "Invalid bump type: $bump"; exit 1 ;;
          esac

          new_tag="v${major}.${minor}.${patch}"
          echo "New tag will be: $new_tag"
          echo "new_tag=$new_tag" >> $GITHUB_OUTPUT

      - name: Create and Push Git Tag
        shell: bash
        run: |
          new_tag=${{ steps.bump.outputs.new_tag }}
          if git rev-parse "$new_tag" >/dev/null 2>&1; then
            echo "Tag $new_tag already exists, skipping creation."
          else
            git tag "$new_tag"
            git push origin "$new_tag"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.bump.outputs.new_tag }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
